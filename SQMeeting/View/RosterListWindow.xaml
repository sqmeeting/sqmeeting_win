<Window x:Class="SQMeeting.View.RosterListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SQMeeting.View"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:command="http://www.galasoft.ch/mvvmlight"
        xmlns:res="clr-namespace:SQMeeting.Properties"
        xmlns:vm="clr-namespace:SQMeeting.ViewModel"
        xmlns:converter="clr-namespace:SQMeeting.Converters"
        xmlns:FRTCView="clr-namespace:SQMeeting.FRTCView"
        DataContext="{Binding Source={StaticResource Locator}, Path=FRTCMeetingVideo}"
        xmlns:frtcView="clr-namespace:SQMeeting.FRTCView"
        mc:Ignorable="d" ResizeMode="CanMinimize" Title="{Binding PaticipantHeader,Mode=OneWay}"
        Height="560" Width="380">
    <Window.Resources>

        <Style  TargetType="ListViewItem"  x:Key="RosterListItemStyle">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="White"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="White"/>
            </Style.Resources>
            <Setter Property="Panel.Background" Value="White"/>
            <Setter Property="Control.HorizontalContentAlignment">
                <Setter.Value>
                    <Binding Path="HorizontalContentAlignment" 
                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}" />
                </Setter.Value>
            </Setter>
            <Setter Property="Control.VerticalContentAlignment">
                <Setter.Value>
                    <Binding Path="VerticalContentAlignment" 
                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}" />
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Padding" Value="2,0,0,0"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListViewItem">
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                Padding="{TemplateBinding Control.Padding}" 
                                BorderBrush="{TemplateBinding Border.BorderBrush}" 
                                Background="{TemplateBinding Panel.Background}" 
                                Name="Bd" 
                                SnapsToDevicePixels="True">
                            <ContentPresenter 
                                Content="{TemplateBinding ContentControl.Content}" 
                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Selector.IsSelected" Value="True">
                                <Setter Property="Panel.Background" TargetName="Bd">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.ControlBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextElement.Foreground">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.Background" TargetName="Bd">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.ControlBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextElement.Foreground">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Property="Panel.Background" TargetName="Bd" Value="White">
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ToggleButton" x:Key="MInofImgToogleBtn" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid x:Name="layout">
                            <Image x:Name="img" Width="24" Height="24" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Source="{TemplateBinding Content}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <converter:BitmapToImageSourceConverter x:Key="BitmapToImgSource"/>
        <converter:InverseBoolConverter x:Key="InverseBool"/>
        <converter:BoolToVisibilityConverter x:Key="BoolToCollapsed"/>
        <converter:IntToBoolConverter x:Key="IntToBool"/>
        <converter:MicMeterToIconConverter x:Key="MicMerterConverter"/>

        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#F2F2F2"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#F2F2F2"/>

        <Style x:Key="ListViewItemStyle1" TargetType="{x:Type ListViewItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="participantItem">
            <Grid x:Name="layout" Height="40"  HorizontalAlignment="Stretch" Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ListView, Mode=FindAncestor}}" 
                  FocusVisualStyle="{x:Null}" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column ="0"  Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"
                                Source="{Binding Source={x:Static res:Resources.frtc_user_face}, Converter={StaticResource BitmapToImageSource}}"/>
                <TextBlock  Grid.Column ="1"  VerticalAlignment="Center" Text="{Binding Name}"  Margin="10,0,0,0"
                                    MaxWidth="180" TextWrapping="Wrap" ToolTip="{Binding Name}"/>
                <TextBlock Grid.Column ="2" VerticalAlignment="Center" Text="{Binding Remark}" Margin="5,0,0,0"/>

                <StackPanel Grid.Column="3" HorizontalAlignment="Right" Orientation="Horizontal">
                    <Image Width="16" Height="16"  Margin="0,0,10,0"  HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="Uniform">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{Binding Source={x:Static res:Resources.frtc_video_pinned}, Converter={StaticResource BitmapToImgSource}}"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsPinned}" Value="true">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <Image Width="16" Height="16"  Margin="0,0,0,0"  HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="Uniform">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{Binding Source={x:Static res:Resources.frtc_audio_mute}, Converter={StaticResource BitmapToImgSource}}"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding MuteAudio}" Value="false"/>
                                            <Condition Binding="{Binding IsSelf}" Value="true"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Source" Value="{Binding Source={StaticResource Locator}, Path=FRTCMeetingVideo.MicMeterLevel, Converter={StaticResource MicMerterConverter}, ConverterParameter=rosterlist}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding MuteAudio}" Value="false"/>
                                            <Condition Binding="{Binding IsSelf}" Value="false"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Source" Value="{Binding Source={x:Static res:Resources.frtc_audio_open}, Converter={StaticResource BitmapToImgSource}}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <Image Width="16" Height="16"  Margin="10,0,26,0"  HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="Uniform">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{Binding Source={x:Static res:Resources.frtc_video_open}, Converter={StaticResource BitmapToImgSource}}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MuteVideo}" Value="true">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="Source" Value="{Binding Source={x:Static res:Resources.frtc_video_mute}, Converter={StaticResource BitmapToImgSource}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </StackPanel>
            </Grid>
        </DataTemplate>

    </Window.Resources>
    <Grid HorizontalAlignment="Stretch" >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0"  VerticalAlignment="Stretch"  HorizontalAlignment="Stretch">
            <Grid  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="roster" Margin="10,0,10,0">
                <Grid.Resources>
                    <Style x:Key="rosterBtnStyle" TargetType="Button" BasedOn="{StaticResource FRTC_SecondaryBtnStyle}">
                        <Setter Property="BorderBrush" Value="{StaticResource FRTC_DefaultBorderColor}"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="#026FFE"/>
                                <Setter Property="BorderBrush" Value="#026FFE"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="10"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="50"/>
                </Grid.RowDefinitions>
                
                <TextBox x:Name="tbSearch" Grid.Row="0" Margin="0,10,0,0" Style="{StaticResource FRTC_DefaultTextBoxStyle}" Height="32" Tag="{x:Static res:Resources.FRTC_MEETING_SDKAPP_SEARCH}" frtcView:InputBoxIcon.ShowIcon="True"
                     Text="{Binding SearchUserPattern, UpdateSourceTrigger=PropertyChanged}" frtcView:InputBoxClearButton.DoClearText="True"
                     frtcView:InputBoxIcon.InputIcon="{Binding Source={x:Static res:Resources.frtc_search}, Converter={StaticResource BitmapToImageSource}}"/>

                <ListView x:Name="searchedUsers" Grid.Row="2" ScrollViewer.HorizontalScrollBarVisibility="Hidden" HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch" ItemsSource="{Binding SearchUserResult, Mode=OneWay}" SelectedItem="{Binding CurrentSelectedParticipant, Mode=TwoWay}"
                          Margin="0,10,0,0" BorderThickness="0,0,0,1" BorderBrush="{StaticResource FRTC_DefaultBorderColor}" ItemTemplate="{StaticResource participantItem}"
                          Visibility="{Binding Searching, Converter={StaticResource BoolToCollapsed}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="SelectionChanged">
                            <b:InvokeCommandAction Command="{Binding PopupMuteDialogCommand}" 
                                CommandParameter="{Binding ElementName=searchedUsers, Path=SelectedValue}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem" BasedOn="{StaticResource RosterListItemStyle}">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="BorderBrush" Value="#F4F4F4"></Setter>
                            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>

                <Grid Grid.Row="1" Background="#E1EDFF" Margin="-10,10,-10,0" Height="40">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsGuestMeeting}" Value="False"/>
                                        <Condition Binding="{Binding IsOperatorRole}" Value="True"/>
                                        <Condition Binding="{Binding UnmuteApplicationsList.Count, Converter={StaticResource IntToBool}, TargetNullValue=False, FallbackValue=False}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMeetingOwner}" Value="True"/>
                                        <Condition Binding="{Binding UnmuteApplicationsList.Count, Converter={StaticResource IntToBool}, TargetNullValue=False, FallbackValue=False}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column ="0" Width="20" Height="20" Margin="15,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Stretch="Uniform"
                           Source="{Binding Source={x:Static res:Resources.frtc_icon_key}, Converter={StaticResource BitmapToImageSource}}"/>
                    <TextBlock  Grid.Column ="1" VerticalAlignment="Center" Text="{Binding NewUnmuteApplicationsNotify}" Margin="10,0,0,0" Foreground="#0465E6"
                                    MaxWidth="180" TextWrapping="Wrap"/>
                    <Button Grid.Column="2" HorizontalAlignment="Right" Width="44" Height="24" Style="{StaticResource FRTC_PrimaryBtnStyle}" 
                            Foreground="#026FFE" Background="#FFFFFF" BorderBrush="#026FFE" BorderThickness="1" FontSize="12" Margin="0,0,31,0"
                            Content="{x:Static res:Resources.FRTC_MEETING_WATCH}" Command="{Binding PopupUnmuteApplicationList}"/>
                    <Ellipse Grid.Column="2" Width="6" Height="6" Fill="#FA5150" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,6,29,0" Visibility="{Binding NewUnmuteApplications, Converter={StaticResource BoolToCollapsed}}"/>
                </Grid>

                <ListView x:Name="rlist" Grid.Row="2" ScrollViewer.HorizontalScrollBarVisibility="Hidden" HorizontalAlignment="Stretch" 
                          VerticalAlignment="Stretch" ItemsSource="{Binding RosterList , Mode=OneWay}" SelectedItem="{Binding CurrentSelectedParticipant, Mode=TwoWay}"
                          Margin="0,0,0,0" BorderThickness="0,0,0,1" BorderBrush="{StaticResource FRTC_DefaultBorderColor}" ItemTemplate="{StaticResource participantItem}"
                          Visibility="{Binding Searching, Converter={StaticResource BoolToCollapsed}, ConverterParameter=Reverse}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="SelectionChanged">
                            <b:InvokeCommandAction Command="{Binding PopupMuteDialogCommand}" 
                                CommandParameter="{Binding ElementName=rlist, Path=SelectedValue}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem" BasedOn="{StaticResource RosterListItemStyle}">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="BorderBrush" Value="#F4F4F4"></Setter>
                            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>

                <StackPanel Grid.Row="2" Margin="0,40,0,0" Orientation="Horizontal" HorizontalAlignment="Center" Visibility="{Binding NoResult, Converter={StaticResource BoolToCollapsed}}">
                    <TextBlock Style="{StaticResource FRTC_DefaultFontText}" Text="{x:Static res:Resources.FRTC_MEETING_PARTICIPANT_SEARCH_NO_RESULT_HEAD}"/>
                    <TextBlock Style="{StaticResource FRTC_DefaultFontText}" Foreground="#026FFE" Text="{Binding SearchUserPattern}" MaxWidth="200" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Style="{StaticResource FRTC_DefaultFontText}" Text="{x:Static res:Resources.FRTC_MEETING_PARTICIPANT_SEARCH_NO_RESULT_TAIL}"/>
                </StackPanel>

                <Button Width="80" Height="30" Grid.Row="3" HorizontalAlignment="Left" FontSize="14" Content="{x:Static res:Resources.FRTC_MEETING_SDKAPP_INVITE_TO_MEETING}" VerticalAlignment="Center"
                        Style="{StaticResource rosterBtnStyle}" Background="Transparent" Command="{Binding PopupInviteWnd}"/>

                <StackPanel Orientation="Horizontal" Grid.Row="3" HorizontalAlignment="Right">
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMeetingOwner}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsGuestMeeting}" Value="False"/>
                                        <Condition Binding="{Binding IsOperatorRole}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <Button Width="80" Height="30" Style="{StaticResource rosterBtnStyle}" FontSize="14" Content="{x:Static res:Resources.FRTC_MEETING_SDKAPP_MUTE_ALL}"
                            Command="{Binding PopupMuteAllDialogCommand}" CommandParameter="mute"/>
                    <Button Width="110" Height="30" Margin="12,0,0,0" Style="{StaticResource rosterBtnStyle}" FontSize="14" Content="{x:Static res:Resources.FRTC_MEETING_SDKAPP_UNMUTE_ALL}"
                            Command="{Binding PopupMuteAllDialogCommand}" CommandParameter="unmute"/>
                </StackPanel>
                <FRTCView:TipBoardControl Grid.RowSpan="4" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" Visibility="Collapsed"/>
            </Grid>
        </Grid>
    </Grid>
</Window>